<코딩 전체적인 흐름.>
1.router에서 path를 만들어준다.
2.component를 만들어주고 router의 path와 연결해준다.

코드가 긴 것을 추가하고자 할 때는 따로 component를 만들어 사용한다.

<동작관련>
.prevent는 기본 이벤트의 자동 실행을 중단 시킨다.
pages/login/index.vue의 <b-form @submit="onSubmit">를 사용하면 페이지를 열자마자 onSubmit이 실행된다.
@submit.prevent를 해주면 바로 실행되지 않는다.

<css관련>
b-container 태그 안에 있는 것들은 양쪽에 마진이 생긴다.

class="mt-4"은 margin top을 줄인 bootstarp 코드이다.

axios를 사용해 http요청을 보낼 수 있다.

async와 await는 자바스크립트의 비동기 처리 패턴 중 가장 최근에 나온 문법으로,
기존의 비동기 처리 방식인 콜백함수와 프로미스의 단점을 보완한다.

this.$router.push({path : '/login'})을 통해 push를 하면 처리가 끝나면 login으로 넘어간다.

<backend>
<회원 가입 구현하기.>
fontend에서 post 방식으로 넘어온 email, password, name받으면(bodyparser사용)
backend에서 몽고디비에 접속해 해당 email이 있나 체크하기.(mongoose사용)
없으면 몽고디비에 세가지 데이터를 스키마를 이용해 기록한다.(mongoose사용)
위의 작업이 다 끝나고 나면 res로 회원가입성공을 보내주고 다음페이지로 넘겨준다.

postman을 통해 post,get등의 요청을 임의로 할 수 있다.

req.body를 사용하기 위해서는 bodyparser를 사용해야 한다.
post에서 body에 담겨온 것을 사용하기 쉽다.

mongoose는 몽고 디비와 연결해주는 패키지이다.
mongoose는 스키마를 만들어 줄 수 있다.
스키마란 데이터베이스의 구조와 제약조건에 관한 전반적인 명세서라고 볼 수 있다.
kotlin의 데이터 클래스라고 볼 수 있다.

받은 데이터가 올바른 형태인지 파악하는 express-validator
app.post('/auth/signup',[
    body('email')
    .isEmail()
    .withMessage("please valid email"),
    body('password')
    .trim()
    .isLength({min:6})
],(req,res,next)=>{
    다음과 같이 app.post()안에 들어간다.
이 미들웨어에서 req에 결과를 넣어줌 이것을 
validationResult(req)함수가 에러를 반환해준다.

import를 require로 바꿔야 하는 경우도 있다.
이럴 때는 package.json에서 type:'module'을 바꿔주어야 한다.

next의 기능 : 다음 미들웨어로 넘겨준다.

statuscode 500은 error response이다.

몽고 디비와 연결하는 부분 안에 app.listen을 넣어 페이지가 열리면 자동적으로 데이터 베이스와 연결되도록 한다.

알아야 할 것 mongoose 사용방법
model은 객체를 DB에 연결하는 것입니다. 
객체를 이용해서 DB명령을 가능하게 해줍니다. 
model의 첫번째 인자는 model이름을 갖고, 두번째 인자는 model에서 사용될 Schema를 갖습니다.
model을 사용해서 데이터를 데이터베이스에 저장하는 방법입니다.

cors=브라우져에서 서버 요청을 보낼 때 포트, 도메인이 다르면 접근을 막는다.
서버쪽에서 이것을 허락해주어야 한다.
backend코드를 수정해야 한다.
const cors = require('cors')
app.use(cors());

